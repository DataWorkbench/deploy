# Copyright 2020 The DataWorkbench Authors. All rights reserved.
# Use of this source code is governed by a Apache license
# that can be found in the LICENSE file.

version: '3'

networks:
  dataworkbench-net:

services:
  dataworkbench-db:
    image: "mysql:8.0.11"
    container_name: "dataworkbench-db"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:${MYSQL_PORT}" # for test & debug
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-db

  dataworkbench-db-init:
    image: "dataworkbench/flyway:dev"
    container_name: "dataworkbench-db-init"
    entrypoint: "sh"
    command: -c "/flyway/sql/ddl/ddl_init.sh -hdataworkbench-db -uroot --connect-timeout=5"
    environment:
      - PASSWORD=${MYSQL_ROOT_PASSWORD}
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-db-init

  dataworkbench-db-ctrl:
    image: "dataworkbench/flyway:dev"
    container_name: "dataworkbench-db-ctrl"
    command: -url=jdbc:mysql://dataworkbench-db/data_workbench -user=root -password=${MYSQL_ROOT_PASSWORD} -validateOnMigrate=false migrate
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-init
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-ctrl

  dataworkbench-etcd:
    image: "quay.io/coreos/etcd:latest"
    container_name: "dataworkbench-etcd"
    volumes:
      - ${DATA_PATH}/etcd:/etcd-data
    command: "/usr/local/bin/etcd --data-dir=/etcd-data --name dataworkbench-etcd --initial-advertise-peer-urls http://0.0.0.0:2380 --listen-peer-urls http://0.0.0.0:2380 --advertise-client-urls http://0.0.0.0:2379 --listen-client-urls http://0.0.0.0:2379 --initial-cluster dataworkbench-etcd=http://0.0.0.0:2380"
    ports:
      - "2379:${ETCD_SERVER_PORT}" # for test & debug
      - "2380:${ETCD_PEER_PORT}" # for test & debug
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-etcd

  dataworkbench-jaeger:
    image: "jaegertracing/all-in-one:1.22"
    container_name: "dataworkbench-jaeger"
    ports:
      - "5775:5775/udp" # for test & debug
      - "6831:6831/udp" # for test & debug
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-jaeger

  apiglobal:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-apiglobal"
    command: "apiglobal start -c ${DATABENCH_CONF}/apiglobal.yaml"
    ports:
      - "${API_GLOBAL_PORT}:${API_GLOBAL_PORT}"
    links:
      - apiserver
      - account
    depends_on:
      - apiserver
      - dataworkbench-jaeger
      - account
    environment:
      - API_GLOBAL_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - API_GLOBAL_READ_TIMEOUT=${API_SERVER_READ_TIMEOUT}
      - API_GLOBAL_WRITE_TIMEOUT=${API_SERVER_WRITE_TIMEOUT}
      - API_GLOBAL_DLE_TIMEOUT=${API_SERVER_DLE_TIMEOUT}
      - API_GLOBAL_EXIT_TIMEOUT=${API_SERVER_EXIT_TIMEOUT}
      - API_GLOBAL_HTTP_SERVER_ADDRESS=0.0.0.0:${API_GLOBAL_PORT}
      - API_GLOBAL_TRACER_SERVICE_NAME=apiglobal
      - API_GLOBAL_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
      - API_GLOBAL_REGIONS=staging:http://apiserver:9001|zh_cn:开发测试区,en_us:staging mock:http://apiserver:9001|zh_cn:模拟测试用,en_us:mock
      - API_GLOBAL_ACCOUNT_SERVER_ADDRESS=account:${ACCOUNT_PORT}
      logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - apiglobal

  apiserver:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-apiserver"
    command: "apiserver start -c ${DATABENCH_CONF}/apiserver.yaml"
    ports:
      - "${API_SERVER_PORT}:${API_SERVER_PORT}"
    links:
      - spacemanager
      - flowmanager
      - scheduler
      - sourcemanager
      - jobmanager
      - udfmanager
      - resourcemanager
      - account
    depends_on:
      - spacemanager
      - flowmanager
      - scheduler
      - sourcemanager
      - jobmanager
      - udfmanager
      - dataworkbench-jaeger
      - account
    environment:
      - API_SERVER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - API_SERVER_READ_TIMEOUT=${API_SERVER_READ_TIMEOUT}
      - API_SERVER_WRITE_TIMEOUT=${API_SERVER_WRITE_TIMEOUT}
      - API_SERVER_DLE_TIMEOUT=${API_SERVER_DLE_TIMEOUT}
      - API_SERVER_EXIT_TIMEOUT=${API_SERVER_EXIT_TIMEOUT}
      - API_SERVER_HTTP_SERVER_ADDRESS=0.0.0.0:${API_SERVER_PORT}
      - API_SERVER_TRACER_SERVICE_NAME=apiserver
      - API_SERVER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
      - API_SERVER_SPACE_MANAGER_ADDRESS=spacemanager:${SPACE_MANAGER_PORT}
      - API_SERVER_SPACE_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_SPACE_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_FLOW_MANAGER_ADDRESS=flowmanager:${FLOW_MANAGER_PORT}
      - API_SERVER_FLOW_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_FLOW_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_SCHEDULER_ADDRESS=scheduler:${SCHEDULER_PORT}
      - API_SERVER_SCHEDULER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_SCHEDULER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_SOURCE_MANAGER_ADDRESS=sourcemanager:${SOURCE_MANAGER_PORT}
      - API_SERVER_SOURCE_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_SOURCE_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_JOB_MANAGER_ADDRESS=jobmanager:${JOB_MANAGER_PORT}
      - API_SERVER_JOB_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_JOB_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_UDF_MANAGER_ADDRESS=udfmanager:${UDF_MANAGER_PORT}
      - API_SERVER_UDF_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_UDF_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_OBSERVER_MANAGER_ADDRESS=observer:{OBSERVER_PORT}
      - API_SERVER_OBSERVER_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_OBSERVER_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_RESOURCE_MANAGER_ADDRESS=resourcemanager:${RESOURCE_MANAGER_PORT}
      - API_SERVER_RESOURCE_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_RESOURCE_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - API_SERVER_ACCOUNT_SERVER_ADDRESS=account:${ACCOUNT_SERVER_PORT}
      - API_SERVER_ACCOUNT_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - API_SERVER_ACCOUNT_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - apiserver

  spacemanager:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-spacemanager"
    command: "spacemanager start -c ${DATABENCH_CONF}/spacemanager.yaml"
    ports:
      - "${SPACE_MANAGER_PORT}:${SPACE_MANAGER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
      - dataworkbench-jaeger
    environment:
      - SPACE_MANAGER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - SPACE_MANAGER_GRPC_SERVER_ADDRESS=0.0.0.0:${SPACE_MANAGER_PORT}
      - SPACE_MANAGER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - SPACE_MANAGER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - SPACE_MANAGER_METRICS_ENABLED=${METRICS_ENABLED}
      - SPACE_MANAGER_METRICS_SERVER_ADDRESS=0.0.0.0:${SPACE_MANAGER_METRICS_PORT}
      - SPACE_MANAGER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - SPACE_MANAGER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - SPACE_MANAGER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPACE_MANAGER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - SPACE_MANAGER_TRACER_SERVICE_NAME=spacemanager
      - SPACE_MANAGER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - spacemanager

  flowmanager:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-flowmanager"
    command: "flowmanager start -c ${DATABENCH_CONF}/flowmanager.yaml"
    ports:
      - "${FLOW_MANAGER_PORT}:${FLOW_MANAGER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
      - dataworkbench-etcd
      - dataworkbench-jaeger
    environment:
      - FLOW_MANAGER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - FLOW_MANAGER_GRPC_SERVER_ADDRESS=0.0.0.0:${FLOW_MANAGER_PORT}
      - FLOW_MANAGER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - FLOW_MANAGER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - FLOW_MANAGER_METRICS_ENABLED=${METRICS_ENABLED}
      - FLOW_MANAGER_METRICS_SERVER_ADDRESS=0.0.0.0:${FLOW_MANAGER_METRICS_PORT}
      - FLOW_MANAGER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - FLOW_MANAGER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - FLOW_MANAGER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - FLOW_MANAGER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - FLOW_MANAGER_SCHEDULER_ADDRESS=scheduler:${SCHEDULER_PORT}
      - FLOW_MANAGER_SCHEDULER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - FLOW_MANAGER_SCHEDULER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - FLOW_MANAGER_TRACER_SERVICE_NAME=flowmanager
      - FLOW_MANAGER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - flowmanager

  scheduler:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-scheduler"
    command: "scheduler start -c ${DATABENCH_CONF}/scheduler.yaml"
    ports:
      - "${SCHEDULER_PORT}:${SCHEDULER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
      - dataworkbench-etcd:dataworkbench-etcd
    depends_on:
      - dataworkbench-db-ctrl
      - dataworkbench-etcd
      - dataworkbench-jaeger
    environment:
      - SCHEDULER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - SCHEDULER_GRPC_SERVER_ADDRESS=0.0.0.0:${SCHEDULER_PORT}
      - SCHEDULER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - SCHEDULER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - SCHEDULER_METRICS_ENABLED=${METRICS_ENABLED}
      - SCHEDULER_METRICS_SERVER_ADDRESS=0.0.0.0:${SCHEDULER_METRICS_PORT}
      - SCHEDULER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - SCHEDULER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - SCHEDULER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SCHEDULER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - SCHEDULER_ETCD_ENDPOINTS=dataworkbench-etcd:${ETCD_SERVER_PORT}
      - SCHEDULER_ETCD_DIAL_TIMEOUT=5s
      - SCHEDULER_TRACER_SERVICE_NAME=scheduler
      - SCHEDULER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
      - SCHEDULER_FLOW_MANAGER_ADDRESS=flowmanager:${FLOW_MANAGER_PORT}
      - SCHEDULER_FLOW_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - SCHEDULER_FLOW_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - SCHEDULER_JOB_MANAGER_ADDRESS=jobmanager:${JOB_MANAGER_PORT}
      - SCHEDULER_JOB_MANAGER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - SCHEDULER_JOB_MANAGER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - scheduler

  sourcemanager:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-sourcemanager"
    command: "sourcemanager start -c ${DATABENCH_CONF}/sourcemanager.yaml"
    ports:
      - "${SOURCE_MANAGER_PORT}:${SOURCE_MANAGER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
      - dataworkbench-jaeger
    environment:
      - SOURCE_MANAGER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - SOURCE_MANAGER_GRPC_SERVER_ADDRESS=0.0.0.0:${SOURCE_MANAGER_PORT}
      - SOURCE_MANAGER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - SOURCE_MANAGER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - SOURCE_MANAGER_METRICS_ENABLED=${METRICS_ENABLED}
      - SOURCE_MANAGER_METRICS_SERVER_ADDRESS=0.0.0.0:${SOURCE_MANAGER_METRICS_PORT}
      - SOURCE_MANAGER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - SOURCE_MANAGER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - SOURCE_MANAGER_MYSQL_USERS=${MYSQL_ROOT_USERS}
      - SOURCE_MANAGER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SOURCE_MANAGER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - SOURCE_MANAGER_TRACER_SERVICE_NAME=sourcemanager
      - SOURCE_MANAGER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - sourcemanager

  udfmanager:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-udfmanager"
    command: "udfmanager start -c ${DATABENCH_CONF}/udfmanager.yaml"
    ports:
      - "${UDF_MANAGER_PORT}:${UDF_MANAGER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - UDF_MANAGER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - UDF_MANAGER_GRPC_SERVER_ADDRESS=0.0.0.0:${UDF_MANAGER_PORT}
      - UDF_MANAGER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - UDF_MANAGER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - UDF_MANAGER_METRICS_ENABLED=${METRICS_ENABLED}
      - UDF_MANAGER_METRICS_SERVER_ADDRESS=0.0.0.0:${UDF_MANAGER_METRICS_PORT}
      - UDF_MANAGER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - UDF_MANAGER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - UDF_MANAGER_MYSQL_USERS=${MYSQL_ROOT_USERS}
      - UDF_MANAGER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - UDF_MANAGER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - UDF_MANAGER_TRACER_SERVICE_NAME=udfmanager
      - UDF_MANAGER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - udfmanager

  zeppelinscale:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-zeppelinscale"
    command: "zeppelinscale start -c ${DATABENCH_CONF}/zeppelinscale.yaml"
    ports:
      - "${ZEPPELIN_SCALE_PORT}:${ZEPPELIN_SCALE_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - ZEPPELIN_SCALE_ZEPPELIN_SERVER_ADDRESS=zeppelin:8080
      - ZEPPELIN_SCALE_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - ZEPPELIN_SCALE_GRPC_SERVER_ADDRESS=0.0.0.0:${ZEPPELIN_SCALE_PORT}
      - ZEPPELIN_SCALE_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - ZEPPELIN_SCALE_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - ZEPPELIN_SCALE_METRICS_ENABLED=${METRICS_ENABLED}
      - ZEPPELIN_SCALE_METRICS_SERVER_ADDRESS=0.0.0.0:${ZEPPELIN_SCALE_METRICS_PORT}
      - ZEPPELIN_SCALE_TRACER_SERVICE_NAME=zeppelinscale
      - ZEPPELIN_SCALE_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - zeppelinscale

  jobwatcher:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-jobwatcher"
    command: "jobwatcher start -c ${DATABENCH_CONF}/jobwatcher.yaml"
    ports:
      - "${JOB_WATCHER_PORT}:${JOB_WATCHER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - JOB_WATCHER_JOB_WORKS=16
      - JOB_WATCHER_JOBDEVELOPER_SERVER_ADDRESS=jobdeveloper:${JOB_DEVELOPER_PORT}
      - JOB_WATCHER_PICKUP_ALONE_JOBS=1
      - JOB_WATCHER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - JOB_WATCHER_GRPC_SERVER_ADDRESS=0.0.0.0:${JOB_WATCHER_PORT}
      - JOB_WATCHER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - JOB_WATCHER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - JOB_WATCHER_METRICS_ENABLED=${METRICS_ENABLED}
      - JOB_WATCHER_METRICS_SERVER_ADDRESS=0.0.0.0:${JOB_WATCHER_METRICS_PORT}
      - JOB_WATCHER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - JOB_WATCHER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - JOB_WATCHER_MYSQL_USERS=${MYSQL_ROOT_USERS}
      - JOB_WATCHER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - JOB_WATCHER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - JOB_WATCHER_TRACER_SERVICE_NAME=jobwatcher
      - JOB_WATCHER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - jobwatcher

  jobdeveloper:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-jobdeveloper"
    command: "jobdeveloper start -c ${DATABENCH_CONF}/jobdeveloper.yaml"
    ports:
      - "${JOB_DEVELOPER_PORT}:${JOB_DEVELOPER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - JOB_DEVELOPER_ZEPPELIN_FLINK_HOME=/zeppelin/flink/flink-1.12.3
      - JOB_DEVELOPER_ZEPPELIN_HADOOP_CONF=/zeppelin/hadoop/hadoop-2.7.5/etc/hadoop
      - JOB_DEVELOPER_ZEPPELIN_FLINK_EXECUTE_JARS=MySQL:/zeppelin/flink/1.12_lib/flink-connector-jdbc_2.11-1.12.3.jar,/zeppelin/flink/1.12_lib/mysql-connector-java-8.0.21.jar;PostgreSQL:/zeppelin/flink/1.12_lib/flink-connector-jdbc_2.11-1.12.3.jar,/zeppelin/flink/1.12_lib/postgresql-42.2.18.jar;Kafka:/zeppelin/flink/1.12_lib/flink-sql-connector-kafka_2.11-1.12.3.jar;ClickHouse:/zeppelin/flink/1.12_lib/flink-connector-clickhouse-1.12.0.jar;Hbase:/zeppelin/flink/1.12_lib/flink-shaded-hadoop-2-uber-2.8.3-10.0.jar,/zeppelin/flink/1.12_lib/flink-sql-connector-hbase-2.2_2.11-1.12.3.jar;Ftp:/zeppelin/flink/1.12_lib/flink-connector-ftp_2.11_1.12.0.jar,/zeppelin/flink/1.12_lib/flink-csv-1.12.2.jar,/zeppelin/flink/1.12_lib/flink-json-1.12.2.jar
      - JOB_DEVELOPER_UDFMANAGER_SERVER_ADDRESS=udfmanager:${UDF_MANAGER_PORT}
      - JOB_DEVELOPER_SOURCEMANAGER_SERVER_ADDRESS=sourcemanager:${SOURCE_MANAGER_PORT}
      - JOB_DEVELOPER_RESOURCEMANAGER_SERVER_ADDRESS=resourcemanager:${RESOURCE_MANAGER_PORT}
      - JOB_DEVELOPER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - JOB_DEVELOPER_GRPC_SERVER_ADDRESS=0.0.0.0:${JOB_DEVELOPER_PORT}
      - JOB_DEVELOPER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - JOB_DEVELOPER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - JOB_DEVELOPER_METRICS_ENABLED=${METRICS_ENABLED}
      - JOB_DEVELOPER_METRICS_SERVER_ADDRESS=0.0.0.0:${JOB_WATCHER_METRICS_PORT}
      - JOB_DEVELOPER_TRACER_SERVICE_NAME=jobdeveloper
      - JOB_DEVELOPER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - jobdeveloper

  jobmanager:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-jobmanager"
    command: "jobmanager start -c ${DATABENCH_CONF}/jobmanager.yaml"
    ports:
      - "${JOB_MANAGER_PORT}:${JOB_MANAGER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
      - jobwatcher:jobwatcher
      - jobdeveloper:jobdeveloper
      - zeppelinscale:zeppelinscale
    depends_on:
      - dataworkbench-db-ctrl
      - dataworkbench-jaeger
    environment:
      - JOB_MANAGER_ZEPPELIN_SCALE_SERVER_ADDRESS=zeppelinscale:${ZEPPELIN_SCALE_PORT}
      - JOB_MANAGER_JOBDEVELOPER_SERVER_ADDRESS=jobdeveloper:${JOB_DEVELOPER_PORT}
      - JOB_MANAGER_JOBWATCHER_SERVER_ADDRESS=jobwatcher:${JOB_WATCHER_PORT}
      - JOB_MANAGER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - JOB_MANAGER_GRPC_SERVER_ADDRESS=0.0.0.0:${JOB_MANAGER_PORT}
      - JOB_MANAGER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - JOB_MANAGER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - JOB_MANAGER_METRICS_ENABLED=${METRICS_ENABLED}
      - JOB_MANAGER_METRICS_SERVER_ADDRESS=0.0.0.0:${JOB_MANAGER_METRICS_PORT}
      - JOB_MANAGER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - JOB_MANAGER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - JOB_MANAGER_MYSQL_USERS=${MYSQL_ROOT_USERS}
      - JOB_MANAGER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - JOB_MANAGER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - JOB_MANAGER_TRACER_SERVICE_NAME=jobmanager
      - JOB_MANAGER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - jobmanager

  resourcemanager:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-resourcemanager"
    command: "resourcemanager start -c ${DATABENCH_CONF}/resourcemanager.yaml"
    ports:
      - "${RESOURCE_MANAGER_PORT}:${RESOURCE_MANAGER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - RESOURCE_MANAGER_HDFS_SERVER=hadoop:9000
      - RESOURCE_MANAGER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - RESOURCE_MANAGER_GRPC_SERVER_ADDRESS=0.0.0.0:${RESOURCE_MANAGER_PORT}
      - RESOURCE_MANAGER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - RESOURCE_MANAGER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - RESOURCE_MANAGER_METRICS_ENABLED=${METRICS_ENABLED}
      - RESOURCE_MANAGER_METRICS_SERVER_ADDRESS=0.0.0.0:${RESOURCE_MANAGER_METRICS_PORT}
      - RESOURCE_MANAGER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - RESOURCE_MANAGER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - RESOURCE_MANAGER_MYSQL_USERS=${MYSQL_ROOT_USERS}
      - RESOURCE_MANAGER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - RESOURCE_MANAGER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - RESOURCE_MANAGER_TRACER_SERVICE_NAME=resourcemanager
      - RESOURCE_MANAGER_TRACER_LOCAL_AGENT=dataworkbench-jaeger:${TRACER_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - resourcemanager

  zeppelin:
    image: "dataworkbench/zeppelin"
    container_name: "dataworkbench-zeppelin"
    links:
      - flinkjobmanager:flinkjobmanager
    ports:
      - "${ZEPPELIN_NODEPORT}:8080"
    depends_on:
      - flinkjobmanager
      - flinktaskmanager
    environment:
      - LIB_URL=${LIB_URL}
      - LIB_NAMES=${LIB_NAMES}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - zeppelin

  flinkjobmanager:
    #image: "flink:1.12.3-scala_2.11"
    image: "dataworkbench/flinkutile"
    container_name: "dataworkbench-flink-jobmanager"
    links:
      - dataworkbench-db:dataworkbench-db
    ports:
      - "${FLINK_PORT}:${FLINK_PORT}"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flinkjobmanager
    networks:
      dataworkbench-net:
        aliases:
          - flinkjobmanager

  flinktaskmanager:
    #image: "flink:1.12.3-scala_2.11"
    image: "dataworkbench/flinkutile"
    container_name: "dataworkbench-flink-taskmanager"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - flinkjobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flinkjobmanager
        taskmanager.numberOfTaskSlots: 10
    networks:
      dataworkbench-net:
        aliases:
          - flinktaskmanager

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: "dataworkbench-zookeeper"
    ports:
      - "2181:2181"
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - zookeeper

  dataworkbench-kafka-for-test:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: "dataworkbench-kafka-for-test"
    ports:
      - "9092:9092"
    links:
      - zookeeper:zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "dataworkbench-kafka-for-test"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-kafka-for-test

  notifier:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-notifier"
    command: "notifier start -c ${DATABENCH_CONF}/notifier.yaml"
    ports:
      - "${NOTIFIER_PORT}:${NOTIFIER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - NOTIFIER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - NOTIFIER_GRPC_SERVER_ADDRESS=0.0.0.0:${NOTIFIER_PORT}
      - NOTIFIER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - NOTIFIER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - NOTIFIER_METRICS_ENABLED=${METRICS_ENABLED}
      - NOTIFIER_METRICS_SERVER_ADDRESS=0.0.0.0:${NOTIFIER_METRICS_PORT}
      - NOTIFIER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - NOTIFIER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - NOTIFIER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - NOTIFIER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - notifier

  hbase:
    image: "harisekhon/hbase:2.1"
    container_name: "dataworkbench-hbase-for-test"
    ports:
      - "2182:2181"
      # - "8080:8080"
      - "8085:8085"
      - "9090:9090"
      - "9095:9095"
      - "16000:16000"
      - "16010:16010"
      - "16201:16201"
      - "16301:16301"
      - "16030:16030"
      - "16020:16020"
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - hbase

  hadoop:
    image: "sequenceiq/hadoop-docker:2.7.0"
    container_name: "dataworkbench-hadoop-for-test"
    ports:
      - "50070:50070"
      - "9000:9000"
      - "8088:8088"
      - "8040:8040"
      - "8042:8042"
      - "49707:49707"
      - "50010:50010"
      - "50075:50075"
      - "50090:50090"
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - hadoop


  observer:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-observer"
    command: "observer start -c ${DATABENCH_CONF}/observer.yaml"
    ports:
      - "${OBSERVER_PORT}:${OBSERVER_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - OBSERVER_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - OBSERVER_GRPC_SERVER_ADDRESS=0.0.0.0:${OBSERVER_PORT}
      - OBSERVER_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - OBSERVER_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - OBSERVER_METRICS_ENABLED=${METRICS_ENABLED}
      - OBSERVER_METRICS_SERVER_ADDRESS=0.0.0.0:${OBSERVER_METRICS_PORT}
      - OBSERVER_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - OBSERVER_MYSQL_DATABASE=${MYSQL_DATABASE}
      - OBSERVER_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - OBSERVER_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - observer

  dataworkbench-redis:
    image: "redis:5.0.0"
    container_name: "dataworkbench-redis"
    volumes:
      - ${DATA_PATH}/redis:/var/lib/redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:${REDIS_PORT}" # for test & debug
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - dataworkbench-redis

  account:
    image: "dataworkbench/dataworkbench:dev"
    container_name: "dataworkbench-account"
    command: "account start -c ${DATABENCH_CONF}/account.yaml"
    ports:
      - "${ACCOUNT_PORT}:${ACCOUNT_PORT}"
    links:
      - dataworkbench-db:dataworkbench-db
      - dataworkbench-redis:dataworkbench-redis
    depends_on:
      - dataworkbench-db-ctrl
    environment:
      - ACCOUNT_LOG_LEVEL=${DEFAULT_LOG_LEVEL}
      - ACCOUNT_GRPC_SERVER_ADDRESS=0.0.0.0:${ACCOUNT_PORT}
      - ACCOUNT_GRPC_SERVER_LOG_LEVEL=${GRPC_LOG_LEVEL}
      - ACCOUNT_GRPC_SERVER_LOG_VERBOSITY=${GRPC_LOG_VERBOSITY}
      - ACCOUNT_METRICS_ENABLED=${METRICS_ENABLED}
      - ACCOUNT_METRICS_SERVER_ADDRESS=0.0.0.0:${ACCOUNT_METRICS_PORT}
      - ACCOUNT_MYSQL_HOSTS=dataworkbench-db:${MYSQL_PORT}
      - ACCOUNT_MYSQL_DATABASE=${MYSQL_DATABASE}
      - ACCOUNT_MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - ACCOUNT_MYSQL_LOG_LEVEL=${MYSQL_LOG_LEVEL}
      - ACCOUNT_REDIS_ADDR=dataworkbench-redis:${REDIS_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: ${LOG_MAX_SIZE}
        max-file: ${LOG_MAX_FILE}
    networks:
      dataworkbench-net:
        aliases:
          - account
