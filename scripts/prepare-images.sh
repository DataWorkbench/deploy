#!/usr/bin/env bash

# Copyright 2020 The Dataomnis Authors. All rights reserved.
# Use of this source code is governed by a Apache license
# that can be found in the LICENSE file.

CurrentDIR=$(cd "$(dirname "$0")" || exit;pwd)
ImagesDirDefault=${CurrentDIR}/dataomnis-images
save="false"
registryurl=""
reposUrl=("docker.io" "quay.io" "dockerhub.qingcloud.com")

func() {
    echo "Usage:"
    echo
    echo "  $0 [-d IMAGES-DIR] [-r PRIVATE-REGISTRY]"
    echo
    echo "Description:"
    echo "  -d IMAGES-DIR          : the dir of files (tar.gz) which generated by \`docker save\`. default: ${ImagesDirDefault}"
    echo "  -r PRIVATE-REGISTRY    : target private registry:port for push-image."
    echo "  -s                     : save model will be applied. Pull the images in the IMAGES-LIST and save images as a tar.gz file."
    echo "  -h                     : usage message"
    echo
    echo "Examples:"
    echo
    echo "# pull and save the images"
    echo "$0 -d ./ -s"
    echo
    echo "# Push the images to private docker registry."
    echo "export KUBERNETES_VERSION=v1.22.1;export HELM_VERSION=v3.6.3;"
    echo "$0 -d ./ -r dockerhub.testing.io"
    exit
}

while getopts 'bsl:r:d:v:h' OPT; do
    case $OPT in
        d) ImagesDir="$OPTARG";;
        r) Registry="$OPTARG";;
        s) save="true";;
        h) func;;
        ?) func;;
        *) func;;
    esac
done

if [ -z "${ImagesDir}" ]; then
    ImagesDir=${ImagesDirDefault}
fi

if [ -n "${Registry}" ]; then
   registryurl=${Registry}
fi

ImagesList="./images-list.txt"

if [[ ${save} == "true" ]] && [[ -n "${ImagesList}" ]]; then
    if [ ! -d ${ImagesDir} ]; then
       mkdir -p ${ImagesDir}
    fi
    ImagesListLen=$(cat ${ImagesList} | wc -l)
    name=""
    images=""
    index=0
    for image in $(<${ImagesList}); do
        if [[ ${image} =~ ^\#\#.* ]]; then
           if [[ -n ${images} ]]; then
              echo ""
              echo "Save images: "${name}" to "${ImagesDir}"/"${name}".tar.gz  <<<"
              docker save ${images} | gzip -c > ${ImagesDir}"/"${name}.tar.gz
              echo ""
           fi
           images=""
           name=$(echo "${image}" | sed 's/#//g' | sed -e 's/[[:space:]]//g')
           ((index++))
           continue
        fi

        echo "Pull image: ${image} .."
        docker pull "${image}"
        images=${images}" "${image}

        if [[ ${index} -eq ${ImagesListLen}-1 ]]; then
           if [[ -n ${images} ]]; then
              docker save ${images} | gzip -c > ${ImagesDir}"/"${name}.tar.gz
           fi
        fi
        ((index++))
    done
elif [ -n "${registryurl}" ] && [ -n "${ImagesList}" ]; then
    # shellcheck disable=SC2045
    for image in $(ls ${ImagesDir}/*.tar.gz); do
      echo "Load images: "${image}"  <<<"
      docker load  < $image
    done

    for image in $(<${ImagesList}); do
        if [[ ${image} =~ ^\#\#.* ]]; then
           continue
        fi

        imgArray=(${image//\// })
        if [ ${#imgArray[@]} == 3 ]; then
          if [ "${imgArray[0]}x" == "${registryurl}x" ]; then
           continue
          fi
          imageurl="${registryurl}/${imgArray[1]}/${imgArray[2]}"
        elif [ ${#imgArray[@]} == 2 ]; then
          imageurl="${registryurl}/${image}"
        else
          imageurl="${registryurl}/library/${image}"
        fi

        ## push image
        echo $imageurl
        docker tag $image $imageurl
        docker push $imageurl
    done
else
  func;
fi