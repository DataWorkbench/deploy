# the home path of local pv to storage data, recommend：the path that mount a disk;
localPvHome: /data


# if config pullSecrets, create docker registry secret in namespace dataomnis-operator/dataomnis-system by kubectl:
# kubectl -n dataomnis-operator create secret docker-registry
#                                       my-docker-registry-secret
#                                       --docker-server=<your-registry-server>
#                                       --docker-username=<your-name>
#                                       --docker-password=<your-pword>
#                                       --docker-email=<your-email>
# then:
# pullSecrets:
#   - my-docker-registry-secret
image:
  registry: docker.io
  pullSecrets: []
  pullPolicy:


# All Nodes Of K8S
nodes: []


################################################
#### Dataomnis-System Service Configuration ####
################################################
dataomnis:
  version: dev
  domain: dataomnis.192.168.27.90.nip.io
  port:

  timeoutSecond: 1200

  mysql:
    maxIdleConn: 16
    maxOpenConn: 128
    connMaxLifetime: 10m
    logLevel: 4  # 1 => Silent, 2 => Error, 3 => Warn, 4 => Info
    slowThreshold: 2s

  global:
    replicas: 1
    strategy: RollingUpdate

    logLevel: 1  # 1=>"debug", 2=>"info", 3=>"warn", 4=>"error", 5=>"fatal"
    logOutput: "file" # "console" or "file"
    grpcLog:
      level: 1  #  1 => info, 2 => waring, 3 => error, 4 => fatal
      verbosity: 99

    metrics:
      enabled: true
      urlPath: "/metrics"

  apiglobal:
    enabled: false  # if the webservice need to deploy, set true
    regions: []
#      - hosts: http://api.dataomnis.192.168.27.90.nip.io
#        enUsName: testing
#        zhCnName: 测试区
    identityProviders: []
    envs: {}

  account:
    source: ""
    envs: {}

  enginemanager:
    resources:
      limits:
        cpu: 1024m
        memory: 2048Mi
      requests:
        cpu: 100m
        memory: 100Mi
    helm:
      debug: false
    flink:
      ingressClass: "nginx"
      enableMultus: false
    envs: {}

  resourcemanager:
    storage:
      background: "hdfs"
      hadoopConfDir: "/etc/hadoop/conf"
      s3:
#        endpoint: ""
#        region: ""
#        bucket: ""
#        accessKeyId: ""
#        secretAccessKey: ""
    envs: {}

  scheduler:
    etcdDialTimeout: 5s
    envs: {}

  # spacemanager configuration
  spacemanager:
    envs: {}

  developer:
    resources:
      limits:
        cpu: 1024m
        memory: 2048Mi
      requests:
        cpu: 100m
        memory: 100Mi

  webservice:
    enabled: false

  serviceMonitor:
    enabled: false
    interval: 60s

  # IAAS api configuration
  iaas:
#    zone: "testing"
#    protocol: "http"
#    host: "api.ks.qingcloud.com"
#    port: 7777
#    uri: "/iaas/"
#    timeout: 600
#    accessKeyId: "LTMJGBXPHSXXXXXXXXXX"
#    secretAccessKey: "7GvVuGAx2iB8NA9n8NtczH8BJnTkDGwGm9N6DYBo"


#####################################
#### Mysql-Cluster Configuration ####
#####################################
mysqlCluster:
  timeoutSecond: 1200
  pxc:
    resources:
      requests:
        cpu: 100m
        memory: 500Mi
      limits:
        cpu: 4000m
        memory: 8Gi

    persistent:
      size: 50Gi
      localPv:
        nodes:
          - worker-s001
          - worker-s002
          - worker-s003


#####################################
#### Redis-Cluster Configuration ####
#####################################
redisCluster:
  resources:
    limits:
      cpu: 400m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 50Mi
  persistent:
    size: 30Gi
    localPv:
      nodes:
        - worker-s001
        - worker-s002
        - worker-s003


####################################
#### Etcd-Cluster Configuration ####
####################################
etcdCluster:
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  persistent:
    size: 30Gi
    localPv:
      nodes:
        - worker-s001
        - worker-s002
        - worker-s003


####################################
#### Hdfs-Cluster Configuration ####
####################################
hdfsCluster:
  timeoutSecond: 1200
  nodes:
    - worker-s001
    - worker-s002
    - worker-s003

  namenode:
    persistent:
      size: 10Gi
      localPv:
        nodes:

  datanode:
    persistent:
      size: 100Gi
      localPv:
        nodes:

  journalnode:
    persistent:
      size: 20Gi
      localPv:
        nodes:

  zookeeper:
    persistent:
      size: 10Gi
      localPv:
        nodes:
