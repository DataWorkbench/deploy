apiVersion: v1
kind: ConfigMap
metadata:
  name: dataomnis-config
  labels:
{{ include "dataomnis.labels" . | indent 4 }}
data:
  account.yaml: |
    log:
      level: {{ coalesce .Values.account.logLevel .Values.common.logLevel }}
      output: {{ coalesce .Values.account.logOutput .Values.common.logOutput }}
      file:
        path: "/opt/dataomnis/log/account/account.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    grpc_server:
      address: "0.0.0.0:{{- .Values.ports.account }}"

    grpc_log:
      level: {{ .Values.common.grpcLog.level }}
      verbosity: {{ .Values.common.grpcLog.verbosity }}

    metrics_server:
      enabled: {{ .Values.common.metrics.enabled }}
      url_path: {{ .Values.common.metrics.urlPath }}
      address: "0.0.0.0:{{- .Values.metricsPorts.account }}"

    tracer:
      service_name: "account"
      local_agent: {{ include "service.jaeger" . | quote }}

    mysql:
      hosts: {{ include "mysql.hostPort" . | quote }}
      users: "{{ .Values.mysql.user }}"
      database: "{{ .Values.mysql.database }}"
      max_idle_conn: {{ .Values.mysql.maxIdleConn }}
      max_open_conn: {{ .Values.mysql.maxOpenConn }}
      conn_max_lifetime: {{ .Values.mysql.connMaxLifetime }}
      log_level: {{ .Values.mysql.logLevel }}
      slow_threshold: {{ .Values.mysql.slowThreshold }}

    redis:
      mode: {{ .Values.redis.mode | quote }}
      master_name: {{ .Values.redis.masterName | quote }}
      database: {{ .Values.redis.database }}
      user_name: {{ .Values.redis.username | quote }}
      password: {{ .Values.redis.password | quote }}
      {{- if eq .Values.redis.mode "cluster" }}
      sentinel_addr: {{ .Values.redis.sentinelAddr | quote }}
      {{- else }}
      cluster_addr: {{ .Values.redis.clusterAddr | quote }}
      {{- end }}

    # iaas api configuration
    iaas:
      zone: {{ .Values.iaas.zone }}
      protocol: {{ .Values.iaas.protocol }}
      host: {{ .Values.iaas.host }}
      port: {{ .Values.iaas.port }}
      uri: {{ .Values.iaas.uri }}
      timeout: {{ .Values.iaas.timeout }}

    source: "{{ .Values.account.source }}"


  apiserver.yaml: |
    log:
      level: {{ coalesce .Values.apiserver.logLevel .Values.common.logLevel }}
      output: {{ coalesce .Values.apiserver.logOutput .Values.common.logOutput }}
      file:
        path: "/opt/dataomnis/log/apiserver/apiserver.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    http_server:
      address: "0.0.0.0:{{ .Values.ports.apiserver }}"
      read_timeout:  {{ .Values.apiserver.httpServer.readTimeout }}
      write_timeout: {{ .Values.apiserver.httpServer.writeTimeout }}
      idel_timeout:  {{ .Values.apiserver.httpServer.idleTimeout }}
      exit_timeout:  {{ .Values.apiserver.httpServer.exitTimeout }}

    tracer:
      service_name: "apiserver"
      local_agent: {{ include "service.jaeger" . | quote }}

    grpc_log:
      level: {{ .Values.common.grpcLog.level }}
      verbosity: {{ .Values.common.grpcLog.verbosity }}


  {{- if .Values.apiglobal.enabled }}
  apiglobal.yaml: |
    log:
      level: {{ coalesce .Values.apiglobal.logLevel .Values.common.logLevel }}
      output: {{ coalesce .Values.apiglobal.logOutput .Values.common.logOutput }}
      file:
        path: "/opt/dataomnis/log/apiglobal/apiglobal.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    http_server:
      address: "0.0.0.0:{{ .Values.ports.apiglobal }}"
      read_timeout: {{ .Values.apiglobal.httpServer.readTimeout }}
      write_timeout: {{ .Values.apiglobal.httpServer.writeTimeout }}
      idel_timeout: {{ .Values.apiglobal.httpServer.idleTimeout }}
      exit_timeout: {{ .Values.apiglobal.httpServer.exitTimeout }}

    tracer:
      service_name: "apiglobal"
      local_agent: {{ include "service.jaeger" . | quote }}

    # region info for apiglobal
    regions:
    {{- range $regionId, $region := .Values.apiglobal.regions }}
      {{ $regionId }}:
        hosts: {{ $region.hosts }}
        names:
          zh_cn: {{ $region.names.zh_cn | quote }}
          en_us: {{ $region.names.en_us | quote }}
    {{- end }}

    # authentication info for apiglobal
    authentication:
      identity_providers:
      {{- range $providerId, $provider := .Values.apiglobal.authentication.identityProviders }}
        {{ $providerId }}:
          name: {{ $provider.name }}
          client_id: {{ $provider.clientId }}
          client_secret: {{ $provider.clientSecret }}
          token_url: {{ $provider.tokenUrl }}
          redirect_url: {{ $provider.redirectUrl }}
      {{- end }}

      # http proxy for apiglobal
      http_proxy: {{ .Values.apiglobal.httpProxy }}
  {{- end }}

  enginemanager.yaml: |
    log:
      level: {{ coalesce .Values.enginemanager.logLevel .Values.common.logLevel }}
      output: "{{ coalesce .Values.enginemanager.logOutput .Values.common.logOutput }}"
      file:
        path: "/opt/dataomnis/log/enginemanager/enginemanager.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    grpc_server:
      address: "0.0.0.0:{{- .Values.ports.enginemanager }}"

    grpc_log:
      level: {{ .Values.common.grpcLog.level }}
      verbosity: {{ .Values.common.grpcLog.verbosity }}

    metrics_server:
      enabled: {{ .Values.common.metrics.enabled }}
      address: "0.0.0.0:{{- .Values.metricsPorts.enginemanager }}"
      url_path: "{{ .Values.common.metrics.urlPath }}"

    tracer:
      service_name: "enginemanager"
      local_agent: {{ include "service.jaeger" . | quote }}

    mysql:
      hosts: {{ include "mysql.hostPort" . | quote }}
      users: "{{ .Values.mysql.user }}"
      database: "{{ .Values.mysql.database }}"
      max_idle_conn: {{ .Values.mysql.maxIdleConn }}
      max_open_conn: {{ .Values.mysql.maxOpenConn }}
      conn_max_lifetime: {{ .Values.mysql.connMaxLifetime }}
      log_level: {{ .Values.mysql.logLevel }}
      slow_threshold: {{ .Values.mysql.slowThreshold }}

    kube_conf_path: "{{ .Values.enginemanager.kubeConfPath }}"
    helm:
      repository_config: "{{ .Values.enginemanager.helm.repoConfig }}"
      repository_cache: "{{ .Values.enginemanager.helm.repoCachePath }}"
      debug: {{ .Values.enginemanager.helm.debug }}

    flink:
      image_repo: "{{ .Values.image.registry }}/dataomnis/flink"
      image_pull_secret: {{ .Values.image.pullSecret }}
      hdfs_configmap_name: "{{ .Values.hdfs.configmapName }}"
      hdfs_configmap_namespace: "{{ .Release.Namespace }}"
      ingress_class: "{{ .Values.enginemanager.flink.ingressClass }}"
      domain: "{{ .Values.domain }}"
      rest_service_port: {{ .Values.enginemanager.flink.restServicePort }}
      rest_service_name_fmt: "{{ .Values.enginemanager.flink.restServiceNameFmt }}"
      enable_multus: {{ .Values.enginemanager.flink.enableMultus }}

    # iaas api configuration
    iaas:
      {{- toYaml .Values.iaas | nindent 6 }}


  resourcemanager.yaml: |
    log:
      level: {{ coalesce .Values.resourcemanager.logLevel .Values.common.logLevel }}
      output: {{ coalesce .Values.resourcemanager.logOutput .Values.common.logOutput }}
      file:
        path: "/opt/dataomnis/log/resourcemanager/resourcemanager.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    grpc_server:
      address: "0.0.0.0:{{- .Values.ports.resourcemanager }}"
    grpc_log:
      level: {{ .Values.common.grpcLog.level }}
      verbosity: {{ .Values.common.grpcLog.verbosity }}

    metrics_server:
      enabled: {{ .Values.common.metrics.enabled }}
      url_path: {{ .Values.common.metrics.urlPath }}
      address: "0.0.0.0:{{- .Values.metricsPorts.resourcemanager }}"

    tracer:
      service_name: "resourcemanager"
      local_agent: {{ include "service.jaeger" . | quote }}

    storage:
      background: {{ .Values.resourcemanager.storage.background | quote }}
      hadoop_conf_dir: {{ .Values.resourcemanager.storage.hadoopConfDir | quote }}
      s3:
        endpoint: {{ .Values.resourcemanager.storage.s3.endpoint | quote }}
        region: {{ .Values.resourcemanager.storage.s3.region | quote }}
        bucket: {{ .Values.resourcemanager.storage.s3.bucket | quote }}
        disable_ssl: false
        force_path_style: false


  scheduler.yaml: |
    log:
      level: {{ coalesce .Values.scheduler.logLevel .Values.common.logLevel }}
      output: {{ coalesce .Values.scheduler.logOutput .Values.common.logOutput }}
      file:
        path: "/opt/dataomnis/log/scheduler/scheduler.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    grpc_server:
      address: "0.0.0.0:{{- .Values.ports.scheduler }}"

    grpc_log:
      level: {{ .Values.common.grpcLog.level }}
      verbosity: {{ .Values.common.grpcLog.verbosity }}

    metrics_server:
      enabled: {{ .Values.common.metrics.enabled }}
      url_path: {{ .Values.common.metrics.urlPath }}
      address: "0.0.0.0:{{- .Values.metricsPorts.scheduler }}"

    tracer:
      service_name: "scheduler"
      local_agent: {{ include "service.jaeger" . | quote }}

    mysql:
      hosts: {{ include "mysql.hostPort" . | quote }}
      users: "{{ .Values.mysql.user }}"
      database: "{{ .Values.mysql.database }}"
      max_idle_conn: {{ .Values.mysql.maxIdleConn }}
      max_open_conn: {{ .Values.mysql.maxOpenConn }}
      conn_max_lifetime: {{ .Values.mysql.connMaxLifetime }}
      log_level: {{ .Values.mysql.logLevel }}
      slow_threshold: {{ .Values.mysql.slowThreshold }}

    etcd:
      endpoints: {{ include "etcd.endpoints" . | quote }}
      dial_timeout: {{ .Values.scheduler.etcdDialTimeout }}

    schedule:
      stream_job_crontab_retry_interval: 120s
      stream_job_check_instance_state_interval: 30s
      sync_job_crontab_retry_interval: 120s
      sync_job_check_instance_state_interval: 30s


  spacemanager.yaml: |
    log:
      level: {{ coalesce .Values.spacemanager.logLevel .Values.common.logLevel }}
      output: {{ coalesce .Values.spacemanager.logOutput .Values.common.logOutput | quote }}
      file:
        path: "/opt/dataomnis/log/spacemanager/spacemanager.log"
        max_size: 128 # In MB.
        max_age: 0
        max_backups: 0
        compress: false

    grpc_server:
      address: "0.0.0.0:{{- .Values.ports.spacemanager }}"

    grpc_log:
      level: {{ .Values.common.grpcLog.level }}
      verbosity: {{ .Values.common.grpcLog.verbosity }}

    metrics_server:
      enabled: {{ .Values.common.metrics.enabled }}
      url_path: {{ .Values.common.metrics.urlPath }}
      address: "0.0.0.0:{{- .Values.metricsPorts.spacemanager }}"

    tracer:
      service_name: "spacemanager"
      local_agent: {{ include "service.jaeger" . | quote }}

    mysql:
      hosts: {{ include "mysql.hostPort" . | quote }}
      users: "{{ .Values.mysql.user }}"
      database: "{{ .Values.mysql.database }}"
      max_idle_conn: {{ .Values.mysql.maxIdleConn }}
      max_open_conn: {{ .Values.mysql.maxOpenConn }}
      conn_max_lifetime: {{ .Values.mysql.connMaxLifetime }}
      log_level: {{ .Values.mysql.logLevel }}
      slow_threshold: {{ .Values.mysql.slowThreshold }}

    cluster:
      flink:
        domain: {{ .Values.domain | quote }}
        webui_port: {{ .Values.port }}
        rest_service_port: {{ .Values.enginemanager.flink.restServicePort }}
        rest_service_name_fmt: {{ .Values.enginemanager.flink.restServiceNameFmt | quote }}

    # iaas api configuration
    iaas:
      {{- toYaml .Values.iaas | nindent 6 }}
