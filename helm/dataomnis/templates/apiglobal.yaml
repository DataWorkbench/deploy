{{- if .Values.apiglobal.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dataomnis.fullname" . }}-apiglobal
  labels:
{{ include "dataomnis.labels" . | indent 4 }}
    component: apiglobal
annotations:
{{- range $key, $value := .Values.apiglobal.annotations }}
  {{ $key | quote }}: {{ $value | quote }}
{{- end }}
spec:
  replicas: {{ coalesce .Values.apiglobal.replicas .Values.common.replicas }}
  strategy:
    type: {{ coalesce .Values.apiglobal.strategy .Values.common.strategy }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      component: apiglobal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        component: apiglobal
      annotations:
      {{- range $key, $value := .Values.apiglobal.podAnnotations }}
        {{ $key | quote }}: {{ $value | quote }}
      {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: component
                    operator: In
                    values:
                      - apiglobal
              topologyKey: 'kubernetes.io/hostname'
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        {{- range .Values.image.pullSecret }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      initContainers:
        {{- if and (eq .Values.common.logOutput "file" ) .Values.filebeat.enabled }}
        - name: filebeat-envsubst
          image: {{ .Values.image.registry }}/dataomnis/envsubst:latest
          args:
            - sh
            - -c
            - cat /data/filebeat.yaml | envsubst > /etc/logsidecar/filebeat.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          volumeMounts:
            - mountPath: /data
              name: filebeat-config
            - mountPath: /etc/logsidecar
              name: injected-config
        {{- end }}
      containers:
        {{- if and (eq .Values.common.logOutput "file" ) .Values.filebeat.enabled }}
        - name: filebeat-sidecar
          image: {{ .Values.image.registry }}/elastic/filebeat:6.7.0
          imagePullPolicy: IfNotPresent
          args:
            - '-c'
            - /etc/logsidecar/filebeat.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          volumeMounts:
            - name: log
              mountPath: /logs
            - name: injected-config
              mountPath: /etc/logsidecar
              readOnly: true
        {{- end }}
        - name: apiglobal
          image: {{ .Values.image.registry }}/dataomnis/apiglobal:{{- .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c", "apiglobal start -c /opt/dataomnis/conf/apiglobal.yaml"]
          ports:
            - name: service
              containerPort: {{ .Values.ports.apiglobal }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: API_GLOBAL_LOG_FILE_PATH
              value: /opt/dataomnis/log/$(POD_NAME).log
{{ include "apiglobal.link.services" . | indent 12 }}
            {{- range $ename, $evalue := .Values.apiglobal.envs }}
            - name: API_GLOBAL_{{ $ename }}
              value: {{ $evalue | quote }}
            {{- end }}
          readinessProbe:
            tcpSocket:
              port: service
            {{- if .Values.apiglobal.readinessProbe }}
            periodSeconds: {{ .Values.apiglobal.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.apiglobal.readinessProbe.initialDelaySeconds }}
            {{- else }}
            periodSeconds: {{ .Values.common.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.common.readinessProbe.initialDelaySeconds }}
            {{- end }}
          resources:
            {{- toYaml .Values.apiglobal.resources | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: service
            {{- if .Values.apiglobal.livenessProbe }}
            initialDelaySeconds: {{ .Values.apiglobal.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.apiglobal.livenessProbe.periodSeconds }}
            {{- else }}
            periodSeconds: {{ .Values.common.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.common.livenessProbe.initialDelaySeconds }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /opt/dataomnis/conf
              readOnly: true
            {{- if eq .Values.common.logOutput "file" }}
            - name: log
              mountPath: /opt/dataomnis/log
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: dataomnis-config
            items:
              - key: apiglobal.yaml
                path: apiglobal.yaml
        {{- if eq .Values.common.logOutput "file" }}
        - name: log
          hostPath:
            path: {{ .Values.persistent.hostPath }}/log/apiglobal
            type: Directory
        {{- end  }}
        {{- if and (eq .Values.common.logOutput "file" ) .Values.filebeat.enabled }}
        - name: filebeat-config
          configMap:
            name: filebeat-config
            items:
              - key: filebeat.yaml
                path: filebeat.yaml
        - name: injected-config
          emptyDir: {}
        {{- end  }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "dataomnis.fullname" . }}-apiglobal
  labels:
{{ include "dataomnis.labels" . | indent 4 }}
    component: apiglobal-service
spec:
  type: ClusterIP
  ports:
    - name: service
      port: {{ .Values.ports.apiglobal }}
      targetPort: service
      protocol: TCP
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    component: apiglobal

{{- end -}}