{{- if eq .Values.resourcemanager.storage.background "s3" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "dataomnis.fullname" . }}-resourcemanager-s3-secret
  labels:
  {{ include "dataomnis.labels" . | indent 4 }}
data:
  access-key-id: {{ .Values.resourcemanager.storage.s3.accessKeyId | b64enc }}
  secret-access-key: {{ .Values.resourcemanager.storage.s3.secretAccessKey | b64enc }}
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dataomnis.fullname" . }}-resourcemanager
  labels:
{{ include "dataomnis.labels" . | indent 4 }}
    component: resourcemanager
spec:
  replicas: {{ coalesce .Values.resourcemanager.replicas .Values.common.replicas }}
  strategy:
    type: {{ coalesce .Values.resourcemanager.strategy .Values.common.strategy }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      component: resourcemanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        component: resourcemanager
      annotations:
      {{- range $key, $value := .Values.resourcemanager.podAnnotations }}
      {{ $key | quote }}: {{ $value | quote }}
      {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: component
                    operator: In
                    values:
                      - resourcemanager
              topologyKey: 'kubernetes.io/hostname'
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      initContainers:
        - name: wait-mysql
          image: {{ .Values.image.registry }}/library/{{- .Values.image.busybox }}
          imagePullPolicy: IfNotPresent
          command: ['/bin/sh', '-c', '{{ include "mysql.waiting.cmd" . }}']
        {{- if and (eq .Values.common.logOutput "file" ) .Values.filebeat.enabled }}
        - name: filebeat-envsubst
          image: {{ .Values.image.registry }}/dataomnis/envsubst:latest
          args:
            - sh
            - -c
            - cat /data/filebeat.yaml | envsubst > /etc/logsidecar/filebeat.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          volumeMounts:
            - mountPath: /data
              name: filebeat-config
            - mountPath: /etc/logsidecar
              name: injected-config
        {{- end }}
      containers:
        {{- if and (eq .Values.common.logOutput "file" ) .Values.filebeat.enabled }}
        - name: filebeat-sidecar
          image: {{ .Values.image.registry }}/elastic/filebeat:6.7.0
          imagePullPolicy: IfNotPresent
          args:
            - '-c'
            - /etc/logsidecar/filebeat.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          volumeMounts:
            - name: log
              mountPath: /logs
            - name: injected-config
              mountPath: /etc/logsidecar
              readOnly: true
        {{- end }}
        - name: resourcemanager
          image: {{ .Values.image.registry }}/dataomnis/resourcemanager:{{- .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["sh", "-c", "resourcemanager start -c /opt/dataomnis/conf/resourcemanager.yaml"]
          ports:
            - name: service
              containerPort: {{ .Values.ports.resourcemanager }}
            - name: metrics
              containerPort: {{ .Values.metricsPorts.resourcemanager }}
          env:
            - name: RESOURCE_MANAGER_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.secretName }}
                  key: root
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: RESOURCE_MANAGER_LOG_FILE_PATH
              value: "/opt/dataomnis/log/$(POD_NAME).log"
            {{- if eq .Values.resourcemanager.storage.background "s3" }}
            - name: RESOURCE_MANAGER_STORAGE_S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "dataomnis.fullname" . }}-resourcemanager-s3-secret
                  key: access-key-id
            - name: RESOURCE_MANAGER_STORAGE_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "dataomnis.fullname" . }}-resourcemanager-s3-secret
                  key: secret-access-key
            {{- end }}
            {{- range $ename, $evalue := .Values.resourcemanager.envs }}
            - name: {{ $ename }}
              value: {{ $evalue | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.resourcemanager.resources | nindent 12 }}
          readinessProbe:
            exec:
              command: ["grpc_health_probe", "-addr=:{{ .Values.ports.resourcemanager }}"]
            {{- if .Values.resourcemanager.readinessProbe }}
            periodSeconds: {{ .Values.resourcemanager.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.resourcemanager.readinessProbe.initialDelaySeconds }}
            {{- else }}
            periodSeconds: {{ .Values.common.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.common.readinessProbe.initialDelaySeconds }}
            {{- end }}
          livenessProbe:
            exec:
              command: ["grpc_health_probe", "-addr=:{{ .Values.ports.resourcemanager }}"]
            {{- if .Values.resourcemanager.livenessProbe }}
            periodSeconds: {{ .Values.resourcemanager.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.resourcemanager.livenessProbe.initialDelaySeconds }}
            {{- else }}
            periodSeconds: {{ .Values.common.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.common.livenessProbe.initialDelaySeconds }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /opt/dataomnis/conf
              readOnly: true
            {{- if eq .Values.resourcemanager.storage.background "hdfs" }}
            - name: hdfs-config
              mountPath: {{ .Values.resourcemanager.storage.hadoopConfDir }}
              readOnly: true
            {{- end }}
            {{- if eq .Values.common.logOutput "file" }}
            - name: log
              mountPath: /opt/dataomnis/log
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: dataomnis-config
            items:
              - key: resourcemanager.yaml
                path: resourcemanager.yaml
        {{- if eq .Values.resourcemanager.storage.background "hdfs" }}
        - name: hdfs-config
          configMap:
            name: {{ .Values.hdfs.configmapName }}
            items:
              - key: core-site.xml
                path: core-site.xml
              - key: hdfs-site.xml
                path: hdfs-site.xml
        {{- end }}
        {{- if eq .Values.common.logOutput "file" }}
        - name: log
          hostPath:
            path: {{ .Values.persistent.hostPath }}/log/resourcemanager
            type: Directory
        {{- end  }}
        {{- if and (eq .Values.common.logOutput "file" ) .Values.filebeat.enabled }}
        - name: filebeat-config
          configMap:
            name: filebeat-config
            items:
              - key: filebeat.yaml
                path: filebeat.yaml
        - name: injected-config
          emptyDir: {}
        {{- end  }}
