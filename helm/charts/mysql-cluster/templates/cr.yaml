apiVersion: pxc.percona.com/v1-5-0
kind: PerconaXtraDBCluster
metadata:
  name: cluster1
  finalizers:
    - delete-pxc-pods-in-order
#    - delete-proxysql-pvc
#    - delete-pxc-pvc
spec:
  secretsName: my-cluster-secrets
  vaultSecretName: keyring-secret-vault
  sslSecretName: my-cluster-ssl
  sslInternalSecretName: my-cluster-ssl-internal
  allowUnsafeConfigurations: false
#  pause: false
  updateStrategy: OnDelete
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com/versions
    apply: recommended
    schedule: "0 4 * * *"
  pxc:
    size: {{ .Values.pxc.size }}
    image: {{ .Values.pxc.image }}
    resources:
      requests:
        memory: {{ .Values.pxc.resources.requests.memory }}
        cpu: {{ .Values.pxc.resources.requests.cpu }}
#        ephemeral-storage: 1Gi
#      limits:
#        memory: 1G
#        cpu: "1"
#        ephemeral-storage: 1Gi
#    nodeSelector:
#      disktype: ssd
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
    podDisruptionBudget:
      maxUnavailable: 1
#      minAvailable: 0
    volumeSpec:
#      emptyDir: {}
#      hostPath:
#        path: /data
#        type: Directory
      persistentVolumeClaim:
        storageClassName: {{ .Values.storageClassName }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
    gracePeriod: 600
  haproxy:
    enabled: {{ .Values.haproxy.enabled }}
    size: {{ .Values.haproxy.size }}
    image: {{ .Values.haproxy.image }}
    resources:
      requests:
        memory: {{ .Values.haproxy.resources.requests.memory }}
        cpu: {{ .Values.haproxy.resources.requests.cpu }}
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
#      advanced:
#        nodeAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            nodeSelectorTerms:
#            - matchExpressions:
#              - key: kubernetes.io/e2e-az-name
#                operator: In
#                values:
#                - e2e-az1
#                - e2e-az2
#    tolerations:
#    - key: "node.alpha.kubernetes.io/unreachable"
#      operator: "Exists"
#      effect: "NoExecute"
#      tolerationSeconds: 6000
    podDisruptionBudget:
      maxUnavailable: 1
#      minAvailable: 0
    gracePeriod: 30
#   loadBalancerSourceRanges:
#     - 10.0.0.0/8
#   serviceAnnotations:
#     service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  proxysql:
    enabled: {{ .Values.proxysql.enabled }}
    size: {{ .Values.proxysql.size }}
    image: {{ .Values.proxysql.image }}
    resources:
      requests:
        memory: {{ .Values.proxysql.resources.requests.memory }}
        cpu: {{ .Values.proxysql.resources.requests.cpu }}
#      limits:
#        memory: 1G
#        cpu: 700m
#    priorityClassName: high-priority
#    nodeSelector:
#      disktype: ssd
#    sidecarResources:
#      requests:
#        memory: 1G
#        cpu: 500m
#      limits:
#        memory: 2G
#        cpu: 600m
#    serviceAccountName: percona-xtradb-cluster-operator-workload
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
#      advanced:
#        nodeAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            nodeSelectorTerms:
#            - matchExpressions:
#              - key: kubernetes.io/e2e-az-name
#                operator: In
#                values:
#                - e2e-az1
#                - e2e-az2
#    tolerations:
#    - key: "node.alpha.kubernetes.io/unreachable"
#      operator: "Exists"
#      effect: "NoExecute"
#      tolerationSeconds: 6000
    volumeSpec:
#      emptyDir: {}
#      hostPath:
#        path: /data
#        type: Directory
      persistentVolumeClaim:
#        storageClassName: standard
#        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
    podDisruptionBudget:
      maxUnavailable: 1
#      minAvailable: 0
    gracePeriod: 30
#   loadBalancerSourceRanges:
#     - 10.0.0.0/8
#   serviceAnnotations:
#     service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  pmm:
    enabled: false
    image: percona/percona-xtradb-cluster-operator:1.5.0-pmm
    serverHost: monitoring-service
    serverUser: pmm
#    resources:
#      requests:
#        memory: 200M
#        cpu: 500m
  backup:
    image: {{ .Values.backup.image }}
    serviceAccountName: percona-xtradb-cluster-operator
#    imagePullSecrets:
#      - name: private-registry-credentials
    storages:
      fs-pvc:
        type: filesystem
        volume:
          persistentVolumeClaim:
            storageClassName: {{ .Values.storageClassName }}
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: {{ .Values.backup.storage }}

    schedule:
      - name: {{ .Values.backup.schedule.name }}
        schedule: {{ .Values.backup.schedule.schedule }}
        keep: 5
        storageName: fs-pvc